(window.webpackJsonp=window.webpackJsonp||[]).push([[84],{445:function(t,o,n){"use strict";n.r(o);var e=n(9),r=Object(e.a)({},(function(){var t=this,o=t._self._c;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("p",[t._v("BootstrapApplicationListener 监听 "),o("code",[t._v("ApplicationEnvironmentPreparedEvent")]),t._v(".")]),t._v(" "),o("p",[t._v("当 ApplicationContext prepareEnvironment 的时候，会触发 BootstrapApplicationListener 会创建 BootstrapContext，BootStrapContext 会扫描其管理的 bean，并给 SpringApplication 注册了 AncestorInitializer。")]),t._v(" "),o("p",[t._v("ApplicationContext Initializers 的时候，调用了 AncestorInitializer ，设置 BootstrapContext 为其 parent。")]),t._v(" "),o("p",[t._v("SpringBootContext 和 BootStrapContext 共享 Environment 中的 PropertySources。")]),t._v(" "),o("p",[t._v("BootstrapImportSelectorConfiguration 加载 BootStrapContext 中的配置。")])])}),[],!1,null,null,null);o.default=r.exports}}]);