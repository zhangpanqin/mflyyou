(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{403:function(e,t,a){"use strict";a.r(t);var r=a(9),s=Object(r.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[e._v("#")]),e._v(" Docker")]),e._v(" "),t("p",[e._v("由于 "),t("a",{attrs:{href:"https://www.docker.com/products/docker-desktop/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker Desktop"),t("OutboundLink")],1),e._v(" 商业使用收费了，因此不能只将安装这个了。")]),e._v(" "),t("p",[e._v("为了简便构建开发环境，还是需要 docker 的，所以用 "),t("a",{attrs:{href:"https://github.com/abiosoft/colima",target:"_blank",rel:"noopener noreferrer"}},[e._v("colima"),t("OutboundLink")],1),e._v(" 代替。")]),e._v(" "),t("p",[e._v("我们所说的 docker 实际上包含 command line interface client（docker），docker server（dockerd），docker compose 等相关组件。")]),e._v(" "),t("p",[e._v("写 dockerfile 还是简单一些的，遇到复杂得再研究即可。")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dockerfile reference"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"colima"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#colima"}},[e._v("#")]),e._v(" colima")]),e._v(" "),t("p",[e._v("可以在本地运行 docker 命令。")]),e._v(" "),t("div",{staticClass:"language-sh extra-class"},[t("pre",{pre:!0,attrs:{class:"language-sh"}},[t("code",[e._v("colima start\ncolima stop\n")])])]),t("h2",{attrs:{id:"docker-command"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker-command"}},[e._v("#")]),e._v(" docker command")]),e._v(" "),t("div",{staticClass:"language-shell extra-class"},[t("pre",{pre:!0,attrs:{class:"language-shell"}},[t("code",[t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 构建 image")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" build "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v(".")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-t")]),e._v(" vue-demo:0.0.1\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 有的时候想看看 image 有什么文件。4bd0f9394726 是 image 的 id")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-it")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--entrypoint")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sh")]),e._v(" 4bd0f9394726\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" run "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-it")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--entrypoint")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("sh")]),e._v(" vue-demo:0.0.1\n"),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查看 image 信息")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" inspect 4bd0f9394726\n")])])]),t("h2",{attrs:{id:"镜像介绍"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#镜像介绍"}},[e._v("#")]),e._v(" 镜像介绍")]),e._v(" "),t("p",[e._v("随波逐流选镜像，我看好多官方镜像都是以 "),t("code",[e._v("debian:bullseye-slim")]),e._v(" 作为基础镜像。")]),e._v(" "),t("p",[t("code",[e._v("bullseye")]),e._v(" 是 debian 11 的代号。slim 是最小镜像。")]),e._v(" "),t("h2",{attrs:{id:"多阶段构建"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#多阶段构建"}},[e._v("#")]),e._v(" 多阶段构建")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('# Start by building the application.\nFROM golang:1.18 as build\n\nWORKDIR /go/src/app\nCOPY . .\n\nRUN go mod download\nRUN CGO_ENABLED=0 go build -o /go/bin/app\n\n# Now copy it into our base image.\nFROM gcr.io/distroless/static-debian11\nCOPY --from=build /go/bin/app /\nCMD ["/app"]\n')])])]),t("p",[e._v("第一阶段构建，第二阶段只是打包最终运行的程序。比如 java 构建的时候需要 gradle 什么的，我只把 jar 包最终放到 docker image 中。")]),e._v(" "),t("h2",{attrs:{id:"基础镜像选择"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#基础镜像选择"}},[e._v("#")]),e._v(" 基础镜像选择")]),e._v(" "),t("h3",{attrs:{id:"google-distroless-image"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#google-distroless-image"}},[e._v("#")]),e._v(" Google distroless image")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/GoogleContainerTools/distroless",target:"_blank",rel:"noopener noreferrer"}},[e._v("google distroless github"),t("OutboundLink")],1)]),e._v(" "),t("p",[t("a",{attrs:{href:"https://console.cloud.google.com/gcr/images/distroless/GLOBAL",target:"_blank",rel:"noopener noreferrer"}},[e._v("google distroless Container Registry "),t("OutboundLink")],1)]),e._v(" "),t("p",[e._v("java ，node，go，python 等等都提供了镜像支持。而且考虑安全和最小体积。")]),e._v(" "),t("p",[e._v("比如说 java17-debian11 它只能够运行 java 程序，而没有包含 shell 环境和软件包管理。")]),e._v(" "),t("p",[e._v("第一优先级我会选择 google 的镜像。")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),t("p",[e._v("Distroless images contain only your application and its runtime dependencies.")]),e._v(" "),t("p",[e._v("They do not contain package managers, shells or any other programs you would expect to find in a standard Linux distribution.")])]),e._v(" "),t("h3",{attrs:{id:"该不该选择-alpine-做为基础镜像"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#该不该选择-alpine-做为基础镜像"}},[e._v("#")]),e._v(" 该不该选择 alpine 做为基础镜像？")]),e._v(" "),t("p",[e._v("我们选择 alpine 的原因是它更小。")]),e._v(" "),t("p",[e._v("alpine 它本来是用于嵌入式系统中的，应用于服务领域可能不太好。")]),e._v(" "),t("p",[t("a",{attrs:{href:"https://alpinelinux.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Alpine Linux"),t("OutboundLink")],1),e._v(" is a Linux distribution built around "),t("a",{attrs:{href:"https://www.musl-libc.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("musl libc"),t("OutboundLink")],1),e._v(" and "),t("a",{attrs:{href:"https://www.busybox.net/",target:"_blank",rel:"noopener noreferrer"}},[e._v("BusyBox"),t("OutboundLink")],1),e._v(".")]),e._v(" "),t("p",[e._v("musl-libc 和 glibc 是 c 语言标准库的不同实现。glibc 兼容性更好，musl-libc 优点是小也是为了嵌入式开发。")]),e._v(" "),t("p",[e._v("为了部署应用建议选择 glibc，因为好多语言都是基于 glibc 编译构建的，兼容性更好。")]),e._v(" "),t("p",[e._v("建议后端部署，还是选择 google distroless 吧。")]),e._v(" "),t("h2",{attrs:{id:"entrypoint-和-cmd"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#entrypoint-和-cmd"}},[e._v("#")]),e._v(" ENTRYPOINT 和 CMD")]),e._v(" "),t("p",[t("code",[e._v("ENTRYPOINT")]),e._v(" 的格式和 "),t("code",[e._v("RUN")]),e._v(" 指令格式一样，分为 "),t("code",[e._v("exec")]),e._v(" 格式和 "),t("code",[e._v("shell")]),e._v(" 格式。")]),e._v(" "),t("p",[t("code",[e._v("ENTRYPOINT")]),e._v(" 的目的和 "),t("code",[e._v("CMD")]),e._v(" 一样，都是在指定容器启动程序及参数。"),t("code",[e._v("ENTRYPOINT")]),e._v(" 在运行时也可以替代，不过比 "),t("code",[e._v("CMD")]),e._v(" 要略显繁琐，需要通过 "),t("code",[e._v("docker run")]),e._v(" 的参数 "),t("code",[e._v("--entrypoint")]),e._v(" 来指定。")]),e._v(" "),t("div",{staticClass:"custom-block tip"},[t("p",{staticClass:"custom-block-title"},[e._v("TIP")]),e._v(" "),t("p",[e._v("当指定了 "),t("code",[e._v("ENTRYPOINT")]),e._v(" 后，"),t("code",[e._v("CMD")]),e._v(" 的含义就发生了改变，不再是直接的运行其命令，")]),e._v(" "),t("p",[e._v("而是将 "),t("code",[e._v("CMD")]),e._v(" 的内容作为参数传给 "),t("code",[e._v("ENTRYPOINT")]),e._v(" 指令，换句话说实际执行时，将变为：ENTRYPOINT CMD")])]),e._v(" "),t("p",[e._v("那么有了 "),t("code",[e._v("CMD")]),e._v(" 后，为什么还要有 "),t("code",[e._v("ENTRYPOINT")]),e._v(" 呢？这种 "),t("code",[e._v('<ENTRYPOINT> "<CMD>"')]),e._v(" 有什么好处么？让我们来看几个场景。")]),e._v(" "),t("p",[t("code",[e._v("ENTRYPOINT")]),e._v(" + "),t("code",[e._v("CMD")]),e._v(" = 默认容器命令参数")]),e._v(" "),t("p",[e._v("推荐指定 "),t("code",[e._v("ENTRYPOINT")]),e._v(" , 然后通过 cmd 来追加参数")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('ENTRYPOINT ["/docker-entrypoint.sh"]\nCMD ["nginx", "-g", "daemon off;"]\n')])])])])}),[],!1,null,null,null);t.default=s.exports}}]);