(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{356:function(t,e,s){"use strict";s.r(e);var a=s(9),r=Object(a.a)({},(function(){var t=this,e=t._self._c;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"docker"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[t._v("#")]),t._v(" Docker")]),t._v(" "),e("p",[t._v("由于 "),e("a",{attrs:{href:"https://www.docker.com/products/docker-desktop/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Docker Desktop"),e("OutboundLink")],1),t._v(" 商业使用收费了，因此不能只将安装这个了。")]),t._v(" "),e("p",[t._v("为了简便构建开发环境，还是需要 docker 的，所以用 "),e("a",{attrs:{href:"https://github.com/abiosoft/colima",target:"_blank",rel:"noopener noreferrer"}},[t._v("colima"),e("OutboundLink")],1),t._v(" 代替。")]),t._v(" "),e("p",[t._v("我们所说的 docker 实际上包含 command line interface client（docker），docker server（dockerd），docker compose 等相关组件。")]),t._v(" "),e("p",[t._v("写 dockerfile 还是简单一些的，遇到复杂得再研究即可。")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://docs.docker.com/engine/reference/builder/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Dockerfile reference"),e("OutboundLink")],1)]),t._v(" "),e("h2",{attrs:{id:"colima"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#colima"}},[t._v("#")]),t._v(" colima")]),t._v(" "),e("p",[t._v("可以在本地运行 docker 命令。")]),t._v(" "),e("div",{staticClass:"language-shelldocker build . -t vue-demo:0.0.1 extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("colima start\ncolima stop\n")])])]),e("h2",{attrs:{id:"docker-command"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#docker-command"}},[t._v("#")]),t._v(" docker command")]),t._v(" "),e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-shell"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 构建 image")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" build "),e("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-t")]),t._v(" vue-demo:0.0.1\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 有的时候想看看 image 有什么文件。4bd0f9394726 是 image 的 id")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-it")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--entrypoint")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sh")]),t._v(" 4bd0f9394726\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" run "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("-it")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token parameter variable"}},[t._v("--entrypoint")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("sh")]),t._v(" vue-demo:0.0.1\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 查看 image 信息")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("docker")]),t._v(" inspect 4bd0f9394726\n")])])]),e("h2",{attrs:{id:"镜像介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#镜像介绍"}},[t._v("#")]),t._v(" 镜像介绍")]),t._v(" "),e("p",[t._v("随波逐流选镜像，我看好多官方镜像都是以 "),e("code",[t._v("debian:bullseye-slim")]),t._v(" 作为基础镜像。")]),t._v(" "),e("p",[e("code",[t._v("bullseye")]),t._v(" 是 debian 11 的代号。slim 是最小镜像。")]),t._v(" "),e("h2",{attrs:{id:"多阶段构建"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#多阶段构建"}},[t._v("#")]),t._v(" 多阶段构建")]),t._v(" "),e("div",{staticClass:"language-dockerfile extra-class"},[e("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Start by building the application.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" golang:1.18 "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" build")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("WORKDIR")]),t._v(" /go/src/app")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" . .")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" go mod download")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RUN")]),t._v(" CGO_ENABLED=0 go build -o /go/bin/app")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# Now copy it into our base image.")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("FROM")]),t._v(" gcr.io/distroless/static-debian11")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COPY")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token options"}},[e("span",{pre:!0,attrs:{class:"token property"}},[t._v("--from")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("=")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("build")])]),t._v(" /go/bin/app /")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" ["),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/app"')]),t._v("]")]),t._v("\n")])])]),e("p",[t._v("第一阶段构建，第二阶段只是打包最终运行的程序。比如 java 构建的时候需要 gradle 什么的，我只把 jar 包最终放到 docker image 中。")]),t._v(" "),e("h2",{attrs:{id:"基础镜像选择"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基础镜像选择"}},[t._v("#")]),t._v(" 基础镜像选择")]),t._v(" "),e("h3",{attrs:{id:"google-distroless-image"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#google-distroless-image"}},[t._v("#")]),t._v(" Google distroless image")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://github.com/GoogleContainerTools/distroless",target:"_blank",rel:"noopener noreferrer"}},[t._v("google distroless github"),e("OutboundLink")],1)]),t._v(" "),e("p",[e("a",{attrs:{href:"https://console.cloud.google.com/gcr/images/distroless/GLOBAL",target:"_blank",rel:"noopener noreferrer"}},[t._v("google distroless Container Registry "),e("OutboundLink")],1)]),t._v(" "),e("p",[t._v("java ，node，go，python 等等都提供了镜像支持。而且考虑安全和最小体积。")]),t._v(" "),e("p",[t._v("比如说 java17-debian11 它只能够运行 java 程序，而没有包含 shell 环境和软件包管理。")]),t._v(" "),e("p",[t._v("第一优先级我会选择 google 的镜像。")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("Distroless images contain only your application and its runtime dependencies.")]),t._v(" "),e("p",[t._v("They do not contain package managers, shells or any other programs you would expect to find in a standard Linux distribution.")])]),t._v(" "),e("h3",{attrs:{id:"该不该选择-alpine-做为基础镜像"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#该不该选择-alpine-做为基础镜像"}},[t._v("#")]),t._v(" 该不该选择 alpine 做为基础镜像？")]),t._v(" "),e("p",[t._v("我们选择 alpine 的原因是它更小。")]),t._v(" "),e("p",[t._v("alpine 它本来是用于嵌入式系统中的，应用于服务领域可能不太好。")]),t._v(" "),e("p",[e("a",{attrs:{href:"https://alpinelinux.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Alpine Linux"),e("OutboundLink")],1),t._v(" is a Linux distribution built around "),e("a",{attrs:{href:"https://www.musl-libc.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("musl libc"),e("OutboundLink")],1),t._v(" and "),e("a",{attrs:{href:"https://www.busybox.net/",target:"_blank",rel:"noopener noreferrer"}},[t._v("BusyBox"),e("OutboundLink")],1),t._v(".")]),t._v(" "),e("p",[t._v("musl-libc 和 glibc 是 c 语言标准库的不同实现。glibc 兼容性更好，musl-libc 优点是小也是为了嵌入式开发。")]),t._v(" "),e("p",[t._v("为了部署应用建议选择 glibc，因为好多语言都是基于 glibc 编译构建的，兼容性更好。")]),t._v(" "),e("p",[t._v("建议后端部署，还是选择 google distroless 吧。")]),t._v(" "),e("h2",{attrs:{id:"entrypoint-和-cmd"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#entrypoint-和-cmd"}},[t._v("#")]),t._v(" ENTRYPOINT 和 CMD")]),t._v(" "),e("p",[e("code",[t._v("ENTRYPOINT")]),t._v(" 的格式和 "),e("code",[t._v("RUN")]),t._v(" 指令格式一样，分为 "),e("code",[t._v("exec")]),t._v(" 格式和 "),e("code",[t._v("shell")]),t._v(" 格式。")]),t._v(" "),e("p",[e("code",[t._v("ENTRYPOINT")]),t._v(" 的目的和 "),e("code",[t._v("CMD")]),t._v(" 一样，都是在指定容器启动程序及参数。"),e("code",[t._v("ENTRYPOINT")]),t._v(" 在运行时也可以替代，不过比 "),e("code",[t._v("CMD")]),t._v(" 要略显繁琐，需要通过 "),e("code",[t._v("docker run")]),t._v(" 的参数 "),e("code",[t._v("--entrypoint")]),t._v(" 来指定。")]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),e("p",[t._v("当指定了 "),e("code",[t._v("ENTRYPOINT")]),t._v(" 后，"),e("code",[t._v("CMD")]),t._v(" 的含义就发生了改变，不再是直接的运行其命令，")]),t._v(" "),e("p",[t._v("而是将 "),e("code",[t._v("CMD")]),t._v(" 的内容作为参数传给 "),e("code",[t._v("ENTRYPOINT")]),t._v(" 指令，换句话说实际执行时，将变为："),e("ENTRYPOINT",[e("CMD")],1)],1)]),t._v(" "),e("p",[t._v("那么有了 "),e("code",[t._v("CMD")]),t._v(" 后，为什么还要有 "),e("code",[t._v("ENTRYPOINT")]),t._v(" 呢？这种 "),e("code",[t._v('<ENTRYPOINT> "<CMD>"')]),t._v(" 有什么好处么？让我们来看几个场景。")]),t._v(" "),e("p",[e("code",[t._v("ENTRYPOINT")]),t._v(" + "),e("code",[t._v("CMD")]),t._v(" = 默认容器命令参数")]),t._v(" "),e("p",[t._v("推荐指定 "),e("code",[t._v("ENTRYPOINT")]),t._v(" , 然后通过 cmd 来追加参数")]),t._v(" "),e("div",{staticClass:"language-dockerfile extra-class"},[e("pre",{pre:!0,attrs:{class:"language-dockerfile"}},[e("code",[e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENTRYPOINT")]),t._v(" ["),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/docker-entrypoint.sh"')]),t._v("]")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token instruction"}},[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CMD")]),t._v(" ["),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"nginx"')]),t._v(", "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"-g"')]),t._v(", "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"daemon off;"')]),t._v("]")]),t._v("\n")])])])])}),[],!1,null,null,null);e.default=r.exports}}]);