(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{332:function(e,a,t){e.exports=t.p+"assets/img/k8s_arch.f7e3a9e1.png"},333:function(e,a,t){e.exports=t.p+"assets/img/api_server.3d190689.png"},399:function(e,a,t){"use strict";t.r(a);var s=t(9),r=Object(s.a)({},(function(){var e=this,a=e._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h2",{attrs:{id:"实践环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实践环境"}},[e._v("#")]),e._v(" 实践环境")]),e._v(" "),a("ul",[a("li",[e._v("Kubernetes: 1.25")]),e._v(" "),a("li",[e._v("colima: 0.5.4")])]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 设置启动 docker,设置 docker 可以用到的内存")]),e._v("\ncolima start "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--kubernetes")]),e._v(" --kubernetes-version "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'v1.25.0+k3s1'")]),e._v("\n")])])]),a("h2",{attrs:{id:"kubectl"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubectl"}},[e._v("#")]),e._v(" Kubectl")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 等待 deployment 部署好")]),e._v("\nkubectl rollout status deployment nginx-deployment\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 重新部署 deployment")]),e._v("\nkubectl rollout restart deployment nginx-deployment\n")])])]),a("h2",{attrs:{id:"docker"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[e._v("#")]),e._v(" Docker")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$PAT")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" login ghcr.io/zhangpanqin "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-u")]),e._v(" USERNAME --password-stdin\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" pull gcr.io/google_containers/busybox\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("docker")]),e._v(" tag gcr.io/google_containers/busybox:latest ghcr.io/zhangpanqin/busybox:0.0.1\n")])])]),a("h2",{attrs:{id:"kubernetes-arch"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubernetes-arch"}},[e._v("#")]),e._v(" Kubernetes Arch")]),e._v(" "),a("p",[a("img",{attrs:{src:t(332),alt:"k8s_arch"}})]),e._v(" "),a("p",[e._v("在 Kubernetes 集群中需要一个 Master 节点来负责整个集群 的管理和控制，所有的控制命令都发给 Master 节点上的组件。")]),e._v(" "),a("p",[e._v("Master 通常会占据一个独立服务器（部署三台保证高可用）。")]),e._v(" "),a("h3",{attrs:{id:"master-节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#master-节点"}},[e._v("#")]),e._v(" Master 节点")]),e._v(" "),a("p",[e._v("Master 节点上运行以下关键进程：")]),e._v(" "),a("ul",[a("li",[e._v("kube-apiserver：提供了 Restful 接口对 Kubernetes 里所有的资源进行 crud。也实现了认证、授权、准入控制等安全校验功能，同时也负责集群状态的存储操作（通过 etcd）")]),e._v(" "),a("li",[e._v("kube-controller-manager：负责维护集群的状态，比如故障检测、自动扩展、滚动更新等。每个资源一般都对应有一个 controller，这些 controller 通过 api server 实时监控各个资源的状态，controller manager 就是负责管理这些 controller 的。")]),e._v(" "),a("li",[e._v("kube-scheduler：负责资源的调度，比如 Pod 改分配那个节点。")])]),e._v(" "),a("h3",{attrs:{id:"node-节点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node-节点"}},[e._v("#")]),e._v(" Node 节点")]),e._v(" "),a("p",[e._v("kubelet，负责 Pod 对应的容器的创建，启停等任务，同时与 Master 密切协作，实现集群的管理功能。kubelet 定时向 Master 汇报自身的情报，操作系统，机器的 cpu 和 memory，以及运行哪些 pod。")]),e._v(" "),a("p",[e._v("Kube-proxy，实现 k8s 的通信与负载均衡机制的重要组件。")]),e._v(" "),a("h3",{attrs:{id:"etcd"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#etcd"}},[e._v("#")]),e._v(" etcd")]),e._v(" "),a("p",[e._v("一致且高度可用的键值存储，用作 Kubernetes 的所有集群数据的后台数据库。")]),e._v(" "),a("h3",{attrs:{id:"kube-apiserver"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kube-apiserver"}},[e._v("#")]),e._v(" kube-apiserver")]),e._v(" "),a("p",[e._v("apiserver 设计上考虑了水平扩容，你可以运行多个示例来负载均衡处理请求。")]),e._v(" "),a("p",[e._v("apiserver 提供了 Restful 接口对 Kubernetes 里所有的资源进行 crud。")]),e._v(" "),a("p",[e._v("apiserver 也实现了认证、授权、准入控制等安全校验功能，同时也负责集群状态的存储操作（通过 etcd）")]),e._v(" "),a("p",[e._v("apiserver 运行在集群的 master 节点上。")]),e._v(" "),a("p",[a("img",{attrs:{src:t(333),alt:"api_server"}})]),e._v(" "),a("h3",{attrs:{id:"controller-manager"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#controller-manager"}},[e._v("#")]),e._v(" controller-manager")]),e._v(" "),a("p",[e._v("Controller Manager 由 kube-controller-manager 和 cloud-controller-manager 组成，是 Kubernetes 的大脑，它通过 apiserver 监控整个集群的状态，并确保集群处于预期的工作状态。")]),e._v(" "),a("p",[e._v("kube-controller-manager 由一系列的控制器组成，比如：")]),e._v(" "),a("ul",[a("li",[e._v("NamespaceController")]),e._v(" "),a("li",[e._v("DeploymentController")]),e._v(" "),a("li",[e._v("PodGCController")]),e._v(" "),a("li",[e._v("ResourceQuotaController")]),e._v(" "),a("li",[e._v("ReplicaSetController")]),e._v(" "),a("li",[e._v("HPAController")]),e._v(" "),a("li",[e._v("ServiceAccountController")]),e._v(" "),a("li",[e._v("GarbageCollectorController")]),e._v(" "),a("li",[e._v("DaemonSetController")])]),e._v(" "),a("h3",{attrs:{id:"scheduler"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#scheduler"}},[e._v("#")]),e._v(" scheduler")]),e._v(" "),a("p",[e._v("Scheduler 负责 Pod 调度，接收 Controller Manager 创建的 Pod，为其选择一个合适的 Node。Node 上的 kubelet 接管 Pod 的生命周期。")]),e._v(" "),a("h2",{attrs:{id:"node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node"}},[e._v("#")]),e._v(" Node")]),e._v(" "),a("p",[e._v("与 Master 节点一样，Node 可以是一台物理主机，也可以是一台虚拟机。当 Node 宕机时，其上的工作负载会被 Master 自动转移到其他节点。")]),e._v(" "),a("p",[e._v("在每个 Node 节点上都运行以下进程：")]),e._v(" "),a("ul",[a("li",[e._v("kubelet: 负责 Pod 对应的容器的创建、启停等任务。kubelet 进程会在 apiserver 上注册所在 Node 节点的信息，定期向 Master 节点汇报该节点的资源使用情况。")]),e._v(" "),a("li",[e._v("kube-proxy: 监听 apiserver 中 service 和 endpoint 的变化情况，并通过 iptables (推荐的代理模式) 等来为 Service 配置负载均衡（仅支持 TCP 和 UDP），使发往 Service 的流量（通过 ClusterIP 和端口）负载均衡到正确的 Pod。")])]),e._v(" "),a("p",[e._v("Container Runtime 负责真正管理镜像和容器的生命周期。kubelet 通过 Container Runtime Interface ( CRI ) 与 Container Runtime 交互，以管理镜像和容器。")]),e._v(" "),a("h2",{attrs:{id:"pod"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pod"}},[e._v("#")]),e._v(" Pod")]),e._v(" "),a("p",[a("code",[e._v("Pod")]),e._v(" 是一组紧密关联的容器集合，它们共享 PID、IPC、Network 和 UTS namespace，是 Kubernetes 调度的基本单位。Pod 内的多个容器共享网络和文件系统，可以通过进程间通信和文件共享这种简单高效的方式组合完成服务。")]),e._v(" "),a("h2",{attrs:{id:"hpa"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#hpa"}},[e._v("#")]),e._v(" HPA")]),e._v(" "),a("p",[e._v("Horizontal Pod Autoscaling (HPA) 可以根据 CPU 使用率或应用自定义 metrics 自动扩展 Pod 数量（支持 replication controller、deployment 和 replica set ）。")]),e._v(" "),a("p",[a("font",{attrs:{color:"red"}},[a("strong",[e._v("注意：")])])],1),e._v(" "),a("ul",[a("li",[e._v("本章是关于 Pod 的自动扩展，而 Node 的自动扩展请参考 "),a("a",{attrs:{href:"https://feisky.gitbooks.io/kubernetes/content/addons/cluster-autoscaler.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Cluster AutoScaler"),a("OutboundLink")],1),e._v("。")]),e._v(" "),a("li",[e._v("在使用 HPA 之前需要 "),a("font",{attrs:{color:"red"}},[a("strong",[e._v("确保已部署好")])]),e._v(" "),a("a",{attrs:{href:"https://github.com/kubernetes-sigs/metrics-server",target:"_blank",rel:"noopener noreferrer"}},[e._v("metrics-server"),a("OutboundLink")],1)],1)]),e._v(" "),a("h2",{attrs:{id:"configmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configmap"}},[e._v("#")]),e._v(" ConfigMap")]),e._v(" "),a("p",[e._v("使用场景：")]),e._v(" "),a("ol",[a("li",[e._v("生成为容器内的环境变量。")]),e._v(" "),a("li",[e._v("设置容器启动命令的启动参数（需设置为环境变量）。")]),e._v(" "),a("li",[e._v("以 Volume 的形式挂载为容器内部的文件或目录。")])]),e._v(" "),a("p",[e._v("使用 ConfigMap 的限制条件")]),e._v(" "),a("ul",[a("li",[e._v("ConfigMap 必须在 Pod 之前创建")]),e._v(" "),a("li",[e._v("ConfigMap 也可以定义为属于某个 Namespace。只有处于相同 Namespace 中的 Pod 可以引用它。")]),e._v(" "),a("li",[e._v("kubelet 只支持可以被 API Server 管理的 Pod 使用 ConfigMap。静态 Pod 无法引用。")]),e._v(" "),a("li",[e._v("在 Pod 对 ConfigMap 进行挂载操作时，容器内只能挂载为“目录”，无法挂载为文件。")])]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 注入环境变量和配置文件")]),e._v("\nkubectl apply "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-f")]),e._v(" https://raw.githubusercontent.com/zhangpanqin/fly-k8s/main/resource/base_config_map.yaml\n\nkubectl "),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("exec")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-it")]),e._v(" pod/busybox "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-n")]),e._v(" fly-k8s -- /bin/sh\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("echo")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$FLY_NAME")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" /config/application.yaml\n"),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("cat")]),e._v(" /config/game.properties\n")])])]),a("h2",{attrs:{id:"secret"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#secret"}},[e._v("#")]),e._v(" Secret")]),e._v(" "),a("h3",{attrs:{id:"docker-registry-secret"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-registry-secret"}},[e._v("#")]),e._v(" docker registry secret")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[e._v("kubectl create secret docker-registry regcred "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    --docker-server"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("ghcr.io/zhangpanqin "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    --docker-username"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("USERNAME --docker-password"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${PAT}")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-n")]),e._v(" fly-k8s\n")])])]),a("h2",{attrs:{id:"serviceaccount"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#serviceaccount"}},[e._v("#")]),e._v(" ServiceAccount")]),e._v(" "),a("p",[e._v("设置使用 service account 的 token 访问资源")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("K8S_NAMESPACE")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'nginx'")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("SERVICE_ACCOUNT_NAME")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'nginx'")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 获取 secret 的名称")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("SECRET_NAME")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("kubectl "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-n")]),e._v(" $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("K8S_NAMESPACE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" get serviceaccount/$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("SERVICE_ACCOUNT_NAME"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-o")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("jsonpath")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'{.secrets[0].name}'")]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 读取 token")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[e._v("export")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("TOKEN")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("$(")]),e._v("kubectl "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-n")]),e._v(" $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("K8S_NAMESPACE"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" get secret $"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("SECRET_NAME"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-o")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token assign-left variable"}},[e._v("jsonpath")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'{.data.token}'")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" base64 "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--decode")]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v(")")])]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 配置 service account token")]),e._v("\nkubectl config set-credentials "),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${SERVICE_ACCOUNT_NAME}")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--token")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${TOKEN}")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 设置当前 context 使用这个 service account")]),e._v("\nkubectl config set-context "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--current")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--user")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token variable"}},[e._v("${SERVICE_ACCOUNT_NAME}")]),e._v("\n")])])]),a("h2",{attrs:{id:"kubectl-command"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#kubectl-command"}},[e._v("#")]),e._v(" kubectl command")]),e._v(" "),a("div",{staticClass:"language-shell extra-class"},[a("pre",{pre:!0,attrs:{class:"language-shell"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 查看日志，klf1m -l 将多 container 根据 label 汇聚到一起,全称： kubectl logs --since 1m -f")]),e._v("\nklf1m "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-l")]),e._v(" app.kubernetes.io/name"),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v("terraform\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 重启应用")]),e._v("\nkubectl rollout restart deployment nginx "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-n")]),e._v(" nginx\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# 更新应用")]),e._v("\nkubectl patch workspaces.app.terraform.io my-team "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--type")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'merge'")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('\'{"spec": {"secretsMountPath": "/tmp/secrets/sandbox"}}\'')]),e._v("\n\nk get workspaces.app.terraform.io "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("awk")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'{if (NR >= 2) print $1}'")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("xargs")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-I")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\nkubectl patch workspaces.app.terraform.io "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--type")]),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'merge'")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("\\")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-p")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('\'{"spec": {"secretsMountPath": "/tmp/secrets/sandbox"}}\'')]),e._v("\n")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);