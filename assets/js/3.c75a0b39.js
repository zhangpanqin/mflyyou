(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{324:function(t,s,a){t.exports=a.p+"assets/img/20210217113317.0c59c0a7.png"},325:function(t,s,a){t.exports=a.p+"assets/img/20210217152105.1179a65f.png"},326:function(t,s,a){t.exports=a.p+"assets/img/20210217152048.1eae251b.png"},327:function(t,s,a){t.exports=a.p+"assets/img/20210217152024.3622446a.png"},328:function(t,s,a){t.exports=a.p+"assets/img/20210217152004.41c60988.png"},329:function(t,s,a){t.exports=a.p+"assets/img/20210217151935.f3893b2d.png"},330:function(t,s,a){t.exports=a.p+"assets/img/20210217154247.b7d32c1e.png"},331:function(t,s,a){t.exports=a.p+"assets/img/20210217155910.788c97c5.png"},332:function(t,s,a){t.exports=a.p+"assets/img/20210217155924.1754df85.png"},333:function(t,s,a){t.exports=a.p+"assets/img/20210217162507.8978e77f.png"},334:function(t,s,a){t.exports=a.p+"assets/img/20210217162445.30d5d26e.png"},335:function(t,s,a){t.exports=a.p+"assets/img/20210217170520.9708c44c.png"},399:function(t,s,a){"use strict";a.r(s);var e=a(9),r=Object(e.a)({},(function(){var t=this,s=t._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"mysql-事务和锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mysql-事务和锁"}},[t._v("#")]),t._v(" Mysql 事务和锁")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),s("p",[t._v("Mysql 的版本为 8.0.17。")])]),t._v(" "),s("h2",{attrs:{id:"事务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事务"}},[t._v("#")]),t._v(" 事务")]),t._v(" "),s("p",[t._v("事务会把数据库从一种一致状态转换为另一种一致状态。事务可以由一条 SQL 组成，也可以由一组复杂的 SQL 组成。")]),t._v(" "),s("p",[t._v("事务的特性：")]),t._v(" "),s("ul",[s("li",[t._v("原子性（Atomicity）")])]),t._v(" "),s("p",[t._v("整个事务操作要不全部成功，要不都失败。不会出现事务中一部分修改操作成功了，一部分失败了的现象，从而破坏数据的一致性。")]),t._v(" "),s("ul",[s("li",[t._v("一致性（consistency）")])]),t._v(" "),s("p",[t._v("事务开始前和结束后，数据库的完整性并不会被破坏。比如有个转账操作，小明原来有 100 元，有个人给小明转了 50 元。当执行了 update 语句之后，事务没有提交，但数据库崩溃了，当启动数据库之后，小明还是 100 元。")]),t._v(" "),s("ul",[s("li",[t._v("隔离性（isolation）")])]),t._v(" "),s("p",[t._v("事务的隔离性要求事务之间互不影响。通常隔离性和锁有关。")]),t._v(" "),s("ul",[s("li",[t._v("持久性（durability）")])]),t._v(" "),s("p",[t._v("事务提交之后，结果就被持久化了。即使数据库崩溃也能根据自身的日志将数据自动恢复到原来状态。")]),t._v(" "),s("p",[t._v("客户端链接操作数据库的时候，都是以一个事务操作的。默认事务是自动提交的。我们也可以设置手动提交，这样我们就可以在一个事务内执行多个 SQL。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询数据库中当前有哪些事务")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" information_schema"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("INNODB_TRX"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h3",{attrs:{id:"事务的隔离级别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#事务的隔离级别"}},[t._v("#")]),t._v(" 事务的隔离级别")]),t._v(" "),s("ul",[s("li",[t._v("读未提交（READ UNCOMMITTED）")]),t._v(" "),s("li",[t._v("读已提交（READ COMMITTED）")]),t._v(" "),s("li",[t._v("可重复读（REPEATABLE READ）")]),t._v(" "),s("li",[t._v("序列化（SERIALIZABLE）")])]),t._v(" "),s("p",[t._v("查询全局默认的隔离级别及会话中使用的隔离级别")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SELECT")]),t._v(" @"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@global.transaction_isolation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("@"),s("span",{pre:!0,attrs:{class:"token variable"}},[t._v("@session.transaction_isolation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("设置隔离级别")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GLOBAL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SESSION")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TRANSACTION")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ISOLATION")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEVEL")]),t._v(" {"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("REPEATABLE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("READ")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("READ")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("COMMITTED")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("READ")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNCOMMITTED")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("ERIALIZABLE}\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 设置全局隔离级别")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("GLOBAL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TRANSACTION")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ISOLATION")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEVEL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("READ")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNCOMMITTED")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 当前会话的隔离级别")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SET")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SESSION")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TRANSACTION")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ISOLATION")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("LEVEL")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("READ")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("UNCOMMITTED")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("隔离级别下会出现的一些问题。")]),t._v(" "),s("p",[t._v("一般我们不会使用 "),s("code",[t._v("读未提交")]),t._v(" 和 "),s("code",[t._v("序列化")]),t._v("。Mysql 默认的隔离级别是 "),s("code",[t._v("可重复读")]),t._v("，Oracle, PostgreSql 是 "),s("code",[t._v("读已提交")]),t._v("。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(324),alt:"image-20210217113317019"}})]),t._v(" "),s("h4",{attrs:{id:"脏读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#脏读"}},[t._v("#")]),t._v(" 脏读")]),t._v(" "),s("p",[s("img",{attrs:{src:a(325),alt:"image-20210217152105920"}})]),t._v(" "),s("p",[t._v("一个事务可以读取另一个事务未提交的数据。会话 A 中插入的数据，但是 "),s("code",[t._v("事务 A")]),t._v(" 没有提交，但是 "),s("code",[t._v("事务 B")]),t._v(" 读取到了插入的 h。")]),t._v(" "),s("h4",{attrs:{id:"不可重复读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不可重复读"}},[t._v("#")]),t._v(" 不可重复读")]),t._v(" "),s("p",[t._v("不可重复读是指在一个事务内多次执行同一个 SQL，但是别的事务的 DML 操作事务提交之后，导致当前事务多次读取的数据集合不一致。")]),t._v(" "),s("p",[t._v("不可重复读和脏读的区别是，脏读是读取到了事务未提交的数据，而不可重读读到的是事务提交之后的数据。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(326),alt:"image-20210217152048832"}})]),t._v(" "),s("p",[t._v("由于 "),s("code",[t._v("会话 A")]),t._v(" 在 Time=4 更新了 id =6 的数据， "),s("code",[t._v("会话 B")]),t._v(" 在同一个事务内在 Time=3 和 Time=5 读取的数据一致，但是 Time=7 读取的数据和之前读取到的数据不一致。")]),t._v(" "),s("h4",{attrs:{id:"幻读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#幻读"}},[t._v("#")]),t._v(" 幻读")]),t._v(" "),s("p",[t._v("幻读指的一个事务读取到另一个事务新插入的行（另一个事务提交了）。这个说话比较容易理解。")]),t._v(" "),s("p",[s("font",{attrs:{color:"red"}},[t._v("敲黑板，重点来了")])],1),t._v(" "),s("p",[s("img",{attrs:{src:a(327),alt:"image-20210217152024875"}})]),t._v(" "),s("p",[t._v("t5,t7,t9 读取的数据都是一致的。并没有出现幻读问题，这个 Mysql 的 MVCC 有关，"),s("font",{attrs:{color:"red"}},[t._v("但是 MVCC 解决不了幻读问题。")])],1),t._v(" "),s("p",[t._v("Mysql 具有 "),s("code",[t._v("MVCC")]),t._v(" 多版本并发控制（Multi version Concurrency Controller）的特性。它是指如果读取的行正在进行 UPDATE 或 DELETE 操作，这时读操作并不会阻塞等待当前行的 UPDATE 或 DELETE 操作完成，而是去读取当前行的一个快照。MVCC 通过 undo log 实现。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(328),alt:"image-20210217152004039"}})]),t._v(" "),s("p",[t._v("在隔离级别是 "),s("code",[t._v("可重复读")]),t._v(" 的情况下，t5,t7,t9 读取的数据是一致的。")]),t._v(" "),s("p",[t._v("但是在隔离级别为 "),s("code",[t._v("读已提交")]),t._v(" 的情况下，得到的结果就不一样了。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(329),alt:"image-20210217151935004"}})]),t._v(" "),s("p",[t._v("在 "),s("code",[t._v("读已提交")]),t._v(" 的情况下，t5 和 t7 读取的是一样的数据，而 t9 读取到了最新的数据。")]),t._v(" "),s("h3",{attrs:{id:"保存点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#保存点"}},[t._v("#")]),t._v(" 保存点")]),t._v(" "),s("p",[t._v("当我们开启一个事务之后，rollback 只能回滚某个事务。但是如果一个事务太多操作，我们只想回滚到具体的某个地方。就可以使用 保存点这个功能。")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 创建某个保存点")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SAVEPOINT")]),t._v(" 保存点名称"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 回滚到具体某个保存点")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ROLLBACK")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TO")]),t._v(" 保存点名称"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 删除某个保存点")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("RELEASE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("SAVEPOINT")]),t._v(" 保存点名称"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 开启一个事务")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("begin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 查询 id 为 1 和 2 的数据")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" index_test "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+-------------+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" description "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+-------------+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("           "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" h6          "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+-------------+")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 更新 id 为 1 的数据，并保存保存点")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),t._v(" index_test "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" description "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'t1'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("savepoint")]),t._v(" t1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 验证数据更新了，因为实在同一个事务，所以是可以查看到的")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" index_test "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+-------------+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" description "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+-------------+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" t1           "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" h6          "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+-------------+")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 更新 id =2 的数据，并保存保存点")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),t._v(" index_test "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" description "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'t2'")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("savepoint")]),t._v(" t2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 验证数据更新了，因为实在同一个事务，所以是可以查看到的")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" index_test "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+-------------+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" description "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+-------------+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" t1          "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" t2          "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+-------------+")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 回滚到具体的某个保存点")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rollback")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" t1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" index_test "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+-------------+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" description "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+-------------+")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" t1           "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v(" h6          "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("|")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("----+-------------+")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 回滚某个保存点之后，t2 保存点丢了，当你回滚 t2 报错。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("rollback")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("to")]),t._v(" t2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- ERROR 1305 (42000): SAVEPOINT t2 does not exist")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("commit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("h2",{attrs:{id:"锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#锁"}},[t._v("#")]),t._v(" 锁")]),t._v(" "),s("h3",{attrs:{id:"server-层的锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#server-层的锁"}},[t._v("#")]),t._v(" Server 层的锁")]),t._v(" "),s("h3",{attrs:{id:"metadata-locks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#metadata-locks"}},[t._v("#")]),t._v(" Metadata Locks")]),t._v(" "),s("p",[t._v("如果我们对表进行 DDL 修改表结构，server 层会添加 Metadata Locks，DML 语句会阻塞等待。")]),t._v(" "),s("h3",{attrs:{id:"innodb-中的锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#innodb-中的锁"}},[t._v("#")]),t._v(" InnoDB 中的锁")]),t._v(" "),s("p",[t._v("Java 中要想保存数据的一致性一般我们都会使用锁，同理 Mysql 也是使用锁来实现了事务。")]),t._v(" "),s("p",[t._v("InnoDB 实现了两种行级锁：共享锁和排它锁。")]),t._v(" "),s("h4",{attrs:{id:"意向锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#意向锁"}},[t._v("#")]),t._v(" 意向锁")]),t._v(" "),s("p",[t._v("InnoDB 内部也有意向锁，由 InnoDB 自动添加。意向锁为表级锁。")]),t._v(" "),s("ul",[s("li",[t._v("意向共享锁，英文名："),s("code",[t._v("Intention Shared Lock")]),t._v("，简称"),s("code",[t._v("IS锁")]),t._v("。当事务准备在某条记录上加"),s("code",[t._v("S锁")]),t._v("时，需要先在表级别加一个"),s("code",[t._v("IS锁")]),t._v("。")]),t._v(" "),s("li",[t._v("意向独占锁，英文名："),s("code",[t._v("Intention Exclusive Lock")]),t._v("，简称"),s("code",[t._v("IX锁")]),t._v("。当事务准备在某条记录上加"),s("code",[t._v("X锁")]),t._v("时，需要先在表级别加一个"),s("code",[t._v("IX锁")]),t._v("。")])]),t._v(" "),s("p",[s("img",{attrs:{src:a(330),alt:"image-20210217154247167"}})]),t._v(" "),s("p",[t._v("IS、IX锁是表级锁，它们的提出仅仅为了在之后加表级别的S锁和X锁时可以快速判断表中的记录是否被上锁，以避免用遍历的方式来查看表中有没有上锁的记录，也就是说其实IS锁和IX锁是兼容的，IX锁和IX锁是兼容的。")]),t._v(" "),s("h3",{attrs:{id:"共享锁-s-lock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#共享锁-s-lock"}},[t._v("#")]),t._v(" 共享锁（S Lock）")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 手动加 s 锁")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" tableName  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("lock")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("in")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("share")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("mode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Mysql 中不加锁的读取数据，都是使用 MVCC来达到的。")]),t._v(" "),s("p",[t._v("不加锁的读，当事务隔离级别为：【可重复读】的时候，读取的是当前事务可看到的数据，每次读取都一致，如果在事务中，使用了 insert,update,delete，可能会改变读取的一致性。")]),t._v(" "),s("p",[t._v("不加锁的读，当事务隔离级别为：【读已提交】的时候，每次读取的数据都是最新的，别的事务提交的数据。")]),t._v(" "),s("h3",{attrs:{id:"排它锁-x-lock"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#排它锁-x-lock"}},[t._v("#")]),t._v(" 排它锁（X Lock）")]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 手动加 x 锁")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("select")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" tableName  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("事务提交之后锁就释放了。S 锁和 S 锁是 "),s("strong",[t._v("兼容")]),t._v(" 的，X 锁和其它锁都 "),s("strong",[t._v("不兼容")]),t._v(" 。不兼容的锁需要等待另一个锁释放。")]),t._v(" "),s("p",[t._v("DELTE、UPDATE、INSERT 数据库默认会给我们添加排它锁。")]),t._v(" "),s("h3",{attrs:{id:"共享锁和排它锁演示"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#共享锁和排它锁演示"}},[t._v("#")]),t._v(" 共享锁和排它锁演示")]),t._v(" "),s("h4",{attrs:{id:"共享锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#共享锁"}},[t._v("#")]),t._v(" 共享锁")]),t._v(" "),s("p",[t._v("事务 A 获取 id=1 的 s 锁，事务 B 也获得了 id=1 的 s 锁。两个事务是不需要阻塞等待另一个事务结束的。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(331),alt:"image-20210217155910816"}})]),t._v(" "),s("h4",{attrs:{id:"排它锁"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#排它锁"}},[t._v("#")]),t._v(" 排它锁")]),t._v(" "),s("p",[t._v("事务 B 阻塞等待事务 A 提交，当事务 A commit 之后，事务 B 的更新语句才能完成。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(332),alt:"image-20210217155924209"}})]),t._v(" "),s("h3",{attrs:{id:"锁的算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#锁的算法"}},[t._v("#")]),t._v(" 锁的算法")]),t._v(" "),s("p",[t._v("InnoDB 存储引擎有 3 种锁的算法，分别是")]),t._v(" "),s("ul",[s("li",[t._v("Record Lock，锁的是当行")]),t._v(" "),s("li",[t._v("Gap Lock ，锁的是一个范围，但是不包括当前行")]),t._v(" "),s("li",[t._v("Next-Key Lock ，锁定是记录本身及之间的间隙")])]),t._v(" "),s("p",[t._v("这几个锁，锁的都是索引。")]),t._v(" "),s("p",[t._v("Mysql 事务隔离级别为 "),s("code",[t._v("重复读")]),t._v(" 采用 Next-Key Lock 算法加锁。")]),t._v(" "),s("p",[t._v("隔离级别为 "),s("code",[t._v("读已提交")]),t._v(" 采用 Record Lock 算法加锁。")]),t._v(" "),s("h4",{attrs:{id:"解决幻读问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#解决幻读问题"}},[t._v("#")]),t._v(" 解决幻读问题")]),t._v(" "),s("table",[s("thead",[s("tr",[s("th",[t._v("Time")]),t._v(" "),s("th",[t._v("事务 A")]),t._v(" "),s("th",[t._v("事务 B")])])]),t._v(" "),s("tbody",[s("tr",[s("td",[t._v("1")]),t._v(" "),s("td",[t._v("begin;")]),t._v(" "),s("td",[t._v("begin;")])]),t._v(" "),s("tr",[s("td",[t._v("2")]),t._v(" "),s("td",[t._v("SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("3")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("SET SESSION TRANSACTION ISOLATION LEVEL REPEATABLE READ;")])]),t._v(" "),s("tr",[s("td",[t._v("4")]),t._v(" "),s("td",[t._v("select * from index_test where id >1 for update;")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("5")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("insert into index_test (id,description)values(3,'adfa');")])]),t._v(" "),s("tr",[s("td",[t._v("6")]),t._v(" "),s("td",[t._v("commit")]),t._v(" "),s("td")]),t._v(" "),s("tr",[s("td",[t._v("7")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("插入语句执行成功")])]),t._v(" "),s("tr",[s("td",[t._v("8")]),t._v(" "),s("td"),t._v(" "),s("td",[t._v("commit;")])])])]),t._v(" "),s("p",[t._v("事务 A 加了 X 锁，由于事务的隔离级别为 "),s("code",[t._v("重复读")]),t._v("，采用的是 Next-Key Lock，锁定的是主键大于 1 的范围，当事务 B 执行插入操作时，会阻塞等待事务 A 完成或者锁超时，事务 B 插入语句报错。")]),t._v(" "),s("h3",{attrs:{id:"锁的使用场景"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#锁的使用场景"}},[t._v("#")]),t._v(" 锁的使用场景")]),t._v(" "),s("p",[t._v("1、比如下单买东西的业务。")]),t._v(" "),s("p",[t._v("小明买 id=1 的商品，同时小张也下单买 id=1 的商品，但是这个商品的库存量目前是 1。")]),t._v(" "),s("p",[t._v("实现的大致逻辑是这样，但是会发生超卖现象。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(333),alt:"image-20210217162507049"}})]),t._v(" "),s("h4",{attrs:{id:"悲观锁解决超卖问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#悲观锁解决超卖问题"}},[t._v("#")]),t._v(" 悲观锁解决超卖问题")]),t._v(" "),s("p",[t._v("解决这个问题也比较简单，加互斥锁。这样检查商品的时候，同时只有一个人能查询。当事务 B 阻塞获取 id=1 的 x 锁超时会抛出异常。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(334),alt:"image-20210217162445067"}})]),t._v(" "),s("p",[t._v("以上是悲观锁解决超卖问题，但是排他锁之间是互斥的，同一时间只能有一个人可以购买商品，后续的人全部都阻塞在事务 B t3 哪里等待锁的释放，这大大降低了程序的并发。")]),t._v(" "),s("h4",{attrs:{id:"乐观锁解决超卖问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#乐观锁解决超卖问题"}},[t._v("#")]),t._v(" 乐观锁解决超卖问题")]),t._v(" "),s("p",[t._v("乐观锁其实就是类似于 java 中 cas。我们在表中添加一个字段 version。")]),t._v(" "),s("p",[s("img",{attrs:{src:a(335),alt:"image-20210217170519998"}})]),t._v(" "),s("p",[t._v("重试操作，可以使用 Spring-retry 这个框架进行，一个注解搞定，很方便。")]),t._v(" "),s("p",[t._v("使用乐观锁之后，100 个用户可以并发的进行修改，其中可能 30% 的人可能一次就付款成功。剩余的 70 人接着重试去购买，这相对于悲观锁来说并发会提高不少。")]),t._v(" "),s("p",[t._v("但是如果系统 TPS 很大，每次只有 10% 甚至更低的人购买成功，还是考虑用悲观锁实现吧。")]),t._v(" "),s("h2",{attrs:{id:"重复读-read-committed"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#重复读-read-committed"}},[t._v("#")]),t._v(" 重复读 READ COMMITTED")]),t._v(" "),s("p",[t._v("不加锁的读，每次读取的都是最新的数据。")]),t._v(" "),s("p",[t._v("对于，SELECT 。。。FOR UPDATE ， SELECT 。。。 LOCK IN SHARE MODE，update，insert，delete 都是在索引上加的记录锁。没有 gap 锁，除非外键检查和 duplicate-key 的时候才使用。")]),t._v(" "),s("p",[t._v("对于读已提交，只支持 binlog_format=ROW，日志中记录的都是数据的变化。")]),t._v(" "),s("p",[s("strong",[t._v("两个重要特性：")])]),t._v(" "),s("ol",[s("li",[t._v("对于 update 和 delete 操作，获取的 X 锁, 当 where 条件匹配过，数据没有匹配上，锁会释放掉。")])]),t._v(" "),s("div",{staticClass:"language-sql extra-class"},[s("pre",{pre:!0,attrs:{class:"language-sql"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CREATE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("TABLE")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("t2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("version"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("NOT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("NULL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("PRIMARY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("KEY")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("ENGINE")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("InnoDB")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("DEFAULT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("CHARSET")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("utf8mb4"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INSERT")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("INTO")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("t2"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("id"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token identifier"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")]),t._v("version"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("VALUES")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("-- 当获取 id =1 的行锁，然后匹配 version 没有匹配到，会释放掉，id=1 的行锁，事务不提交，这个时候别的事务是可以获取这行锁的。")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("update")]),t._v(" t2 "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("set")]),t._v(" version "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("where")]),t._v(" id "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("and")]),t._v(" version"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ol",[s("li",[t._v("如果 update  锁住一行数据需要更新，那么每次读取都会拿到数据库中最新的数据，为了匹配 where 条件")])])])}),[],!1,null,null,null);s.default=r.exports}}]);